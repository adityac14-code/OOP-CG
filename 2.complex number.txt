#include <iostream>
using namespace std;

class Complex {
private:
    double real;
    double imaginary;

public:
    // Constructor
    Complex(double r = 0, double i = 0) : real(r), imaginary(i) {}

    // Overloaded + operator to add two complex numbers
    Complex operator+(const Complex& other) const {
        return Complex(real + other.real, imaginary + other.imaginary);
    }

    // Overloaded * operator to multiply two complex numbers
    Complex operator*(const Complex& other) const {
        return Complex(
            (real * other.real) - (imaginary * other.imaginary),
            (real * other.imaginary) + (imaginary * other.real)
        );
    }

    // Overloaded << operator to print a complex number
    friend ostream& operator<<(ostream& os, const Complex& c) {
        os << c.real << " + " << c.imaginary << "I";
        return os;
    }

    // Overloaded >> operator to read a complex number
    friend istream& operator>>(istream& is, Complex& c) {
        cout << "Enter real part: ";
        is >> c.real;
        cout << "Enter imaginary part: ";
        is >> c.imaginary;
        return is;
    }
};

int main() {
    Complex c1, c2, result;

    cout << "Enter the first complex number:" << endl;
    cin >> c1;

    cout << "Enter the second complex number:" << endl;
    cin >> c2;

    result = c1 + c2;
    cout << "Sum: " << result << endl;

    result = c1 * c2;
    cout << "Product: " << result << endl;

    return 0;
}
